import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
// import { RootState, AppThunk } from '../store';
import { fetchVehicleTypes } from '../../dataAPI/metaAPI';
import { MetaState } from '../../types/interfaces/MetaState';
import { LocalStorage } from '../localStorage';

// const initialState: MetaState = {
//   status: 'idle',
//   vehicleTypes: []
// };

const initialState: MetaState = LocalStorage.getState();
// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const vehicleTypesAsync = createAsyncThunk('meta/vehicleTypes', async () => {
  const metaData = await fetchVehicleTypes();
  return metaData;
});

// export const fetchName = createAsyncThunk('meta/getName', async () => {
//   const response = await getName();
//   return response;
// });

// fetchName.re

const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // increment: (state) => {
    //   // Redux Toolkit allows us to write "mutating" logic in reducers. It
    //   // doesn't actually mutate the state because it uses the Immer library,
    //   // which detects changes to a "draft state" and produces a brand new
    //   // immutable state based off those changes
    //   // state.value += 1;
    // },
    // decrement: (state) => {
    //   state. -= 1;
    // },
    // // Use the PayloadAction type to declare the contents of `action.payload`
    // incrementByAmount: (state, action: PayloadAction<number>) => {
    //   state.value += action.payload;
    // }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(vehicleTypesAsync.pending, (state, action: any) => {
        state.status = 'loading';
        console.log(action);
      })
      .addCase(vehicleTypesAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        // state.value += action.payload;
        console.log(action);
      })
      .addCase(vehicleTypesAsync.rejected, (state) => {
        state.status = 'idle';
        // state.value += action.payload;
        // console.log(action);
      })
      .addDefaultCase((state, action) => {
        state.status = 'loading';
        // state.value += action.payload;
        console.log(action);
      });
  }
});

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default counterSlice.reducer;
